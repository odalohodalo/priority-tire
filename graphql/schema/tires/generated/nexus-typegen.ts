/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Query: {};
  Tire: { // root type
    approvedRimWidth?: string | null; // String
    aspectRatio?: number | null; // Int
    brand?: string | null; // String
    countryOfOrigin?: string | null; // String
    id?: number | null; // Int
    image?: string | null; // String
    loadIndex?: number | null; // Int
    loadRange?: string | null; // String
    model?: string | null; // String
    mpn?: string | null; // String
    overallDiameter?: number | null; // Float
    performance?: string | null; // String
    price?: number | null; // Float
    rating?: number | null; // Float
    rebateAvailable?: boolean | null; // Boolean
    rimDiameter?: number | null; // Int
    roadHazardWarranty?: boolean | null; // Boolean
    runFlat?: boolean | null; // Boolean
    season?: string | null; // String
    sectionWidth?: number | null; // Int
    sidewall?: string | null; // String
    size?: string | null; // String
    sku?: string | null; // String
    speedRating?: string | null; // String
    stock?: number | null; // Int
    treadDepth?: string | null; // String
    type?: string | null; // String
    utqg?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Query: { // field return type
    tire: NexusGenRootTypes['Tire'] | null; // Tire
    tires: Array<NexusGenRootTypes['Tire'] | null> | null; // [Tire]
  }
  Tire: { // field return type
    approvedRimWidth: string | null; // String
    aspectRatio: number | null; // Int
    brand: string | null; // String
    countryOfOrigin: string | null; // String
    id: number | null; // Int
    image: string | null; // String
    loadIndex: number | null; // Int
    loadRange: string | null; // String
    model: string | null; // String
    mpn: string | null; // String
    overallDiameter: number | null; // Float
    performance: string | null; // String
    price: number | null; // Float
    rating: number | null; // Float
    rebateAvailable: boolean | null; // Boolean
    rimDiameter: number | null; // Int
    roadHazardWarranty: boolean | null; // Boolean
    runFlat: boolean | null; // Boolean
    season: string | null; // String
    sectionWidth: number | null; // Int
    sidewall: string | null; // String
    size: string | null; // String
    sku: string | null; // String
    speedRating: string | null; // String
    stock: number | null; // Int
    treadDepth: string | null; // String
    type: string | null; // String
    utqg: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Query: { // field return type name
    tire: 'Tire'
    tires: 'Tire'
  }
  Tire: { // field return type name
    approvedRimWidth: 'String'
    aspectRatio: 'Int'
    brand: 'String'
    countryOfOrigin: 'String'
    id: 'Int'
    image: 'String'
    loadIndex: 'Int'
    loadRange: 'String'
    model: 'String'
    mpn: 'String'
    overallDiameter: 'Float'
    performance: 'String'
    price: 'Float'
    rating: 'Float'
    rebateAvailable: 'Boolean'
    rimDiameter: 'Int'
    roadHazardWarranty: 'Boolean'
    runFlat: 'Boolean'
    season: 'String'
    sectionWidth: 'Int'
    sidewall: 'String'
    size: 'String'
    sku: 'String'
    speedRating: 'String'
    stock: 'Int'
    treadDepth: 'String'
    type: 'String'
    utqg: 'String'
  }
}

export interface NexusGenArgTypes {
  Query: {
    tire: { // args
      id?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}